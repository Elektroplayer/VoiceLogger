"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
class CommandsListener extends lib_1.Listener {
    constructor(client) {
        super(client);
        this.type = "message";
        this.id = "commands";
        this.loggerAccessRoles = [];
        for (const role of process.env.LOGGER_ACCESS_ROLES.split(","))
            this.loggerAccessRoles.push(role.trim());
    }
    async exec(message) {
        if (!message.content.toLowerCase().startsWith(process.env.PREFIX))
            return;
        const messageArray = message.content.slice(process.env.PREFIX.length).split(/\s+/g);
        const name = messageArray[0].toLowerCase();
        const args = messageArray.slice(1);
        const command = this.client.getCommand(name);
        if (!command)
            return;
        const roles = message.member.roles.cache.array();
        if (command.loggerAccessOnly) {
            var hasRole = false;
            for (const role of roles.map(role => role.id)) {
                if (hasRole)
                    break;
                if (this.loggerAccessRoles.includes(role))
                    hasRole = true;
            }
            if (!hasRole)
                return await message.channel.send("Для этой команды требуется особая роль, которой у вас нет.");
        }
        command.exec(message, args);
    }
}
exports.default = CommandsListener;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbGlzdGVuZXJzL0NvbW1hbmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsZ0NBQXlDO0FBRXpDLE1BQXFCLGdCQUFpQixTQUFRLGNBQVE7SUFLbEQsWUFBWSxNQUFjO1FBQ3RCLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUxWLFNBQUksR0FBdUIsU0FBUyxDQUFBO1FBQ3BDLE9BQUUsR0FBVyxVQUFVLENBQUE7UUFDdkIsc0JBQWlCLEdBQWEsRUFBRSxDQUFBO1FBSW5DLEtBQUssTUFBTSxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUVELEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZ0I7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQUUsT0FBTTtRQUN6RSxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbkYsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO1FBQzFDLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDNUMsSUFBSSxDQUFDLE9BQU87WUFBRSxPQUFNO1FBRXBCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUVoRCxJQUFJLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUMxQixJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUE7WUFDbkIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUMzQyxJQUFJLE9BQU87b0JBQUUsTUFBSztnQkFDbEIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztvQkFDckMsT0FBTyxHQUFHLElBQUksQ0FBQTthQUNyQjtZQUNELElBQUksQ0FBQyxPQUFPO2dCQUFFLE9BQU8sTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyw0REFBNEQsQ0FBQyxDQUFBO1NBQ2hIO1FBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7SUFDL0IsQ0FBQztDQUNKO0FBakNELG1DQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudEV2ZW50cywgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCJcbmltcG9ydCB7IENsaWVudCwgTGlzdGVuZXIgfSBmcm9tIFwiLi4vbGliXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbWFuZHNMaXN0ZW5lciBleHRlbmRzIExpc3RlbmVyIHtcbiAgICBwdWJsaWMgdHlwZToga2V5b2YgQ2xpZW50RXZlbnRzID0gXCJtZXNzYWdlXCJcbiAgICBwdWJsaWMgaWQ6IHN0cmluZyA9IFwiY29tbWFuZHNcIlxuICAgIHB1YmxpYyBsb2dnZXJBY2Nlc3NSb2xlczogc3RyaW5nW10gPSBbXVxuXG4gICAgY29uc3RydWN0b3IoY2xpZW50OiBDbGllbnQpIHtcbiAgICAgICAgc3VwZXIoY2xpZW50KVxuICAgICAgICBmb3IgKGNvbnN0IHJvbGUgb2YgcHJvY2Vzcy5lbnYuTE9HR0VSX0FDQ0VTU19ST0xFUy5zcGxpdChcIixcIikpXG4gICAgICAgICAgICB0aGlzLmxvZ2dlckFjY2Vzc1JvbGVzLnB1c2gocm9sZS50cmltKCkpIFxuICAgIH1cblxuICAgIGFzeW5jIGV4ZWMobWVzc2FnZTogTWVzc2FnZSkge1xuICAgICAgICBpZiAoIW1lc3NhZ2UuY29udGVudC50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgocHJvY2Vzcy5lbnYuUFJFRklYKSkgcmV0dXJuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VBcnJheSA9IG1lc3NhZ2UuY29udGVudC5zbGljZShwcm9jZXNzLmVudi5QUkVGSVgubGVuZ3RoKS5zcGxpdCgvXFxzKy9nKVxuICAgICAgICBjb25zdCBuYW1lID0gbWVzc2FnZUFycmF5WzBdLnRvTG93ZXJDYXNlKClcbiAgICAgICAgY29uc3QgYXJncyA9IG1lc3NhZ2VBcnJheS5zbGljZSgxKVxuXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSB0aGlzLmNsaWVudC5nZXRDb21tYW5kKG5hbWUpXG4gICAgICAgIGlmICghY29tbWFuZCkgcmV0dXJuXG5cbiAgICAgICAgY29uc3Qgcm9sZXMgPSBtZXNzYWdlLm1lbWJlci5yb2xlcy5jYWNoZS5hcnJheSgpXG5cbiAgICAgICAgaWYgKGNvbW1hbmQubG9nZ2VyQWNjZXNzT25seSkge1xuICAgICAgICAgICAgdmFyIGhhc1JvbGUgPSBmYWxzZVxuICAgICAgICAgICAgZm9yIChjb25zdCByb2xlIG9mIHJvbGVzLm1hcChyb2xlID0+IHJvbGUuaWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc1JvbGUpIGJyZWFrXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubG9nZ2VyQWNjZXNzUm9sZXMuaW5jbHVkZXMocm9sZSkpXG4gICAgICAgICAgICAgICAgICAgIGhhc1JvbGUgPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhhc1JvbGUpIHJldHVybiBhd2FpdCBtZXNzYWdlLmNoYW5uZWwuc2VuZChcItCU0LvRjyDRjdGC0L7QuSDQutC+0LzQsNC90LTRiyDRgtGA0LXQsdGD0LXRgtGB0Y8g0L7RgdC+0LHQsNGPINGA0L7Qu9GMLCDQutC+0YLQvtGA0L7QuSDRgyDQstCw0YEg0L3QtdGCLlwiKVxuICAgICAgICB9XG4gICAgICAgIGNvbW1hbmQuZXhlYyhtZXNzYWdlLCBhcmdzKVxuICAgIH1cbn0iXX0=