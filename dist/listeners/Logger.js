"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const utils_1 = require("../lib/utils");
class ReadyListener2 extends lib_1.Listener {
    constructor() {
        super(...arguments);
        this.type = "ready";
        this.id = "Logger";
    }
    async exec() {
        const guild = this.client.guilds.resolve(process.env.GUILD_ID);
        var voices = process.env.VOICES
            .split(",")
            .map(e => guild.channels.resolve(e.trim()))
            .filter(voice => voice && voice.type == "voice");
        if (!voices.length)
            voices = guild.channels.cache.array().filter(channel => channel.type == "voice");
        var prevChannelsMembers = new Map();
        setInterval(async () => {
            if (!this.client.logEnabled)
                return;
            for (const voice of voices) {
                const prevMembers = prevChannelsMembers.get(voice.id);
                if (prevMembers && !voice.members.array().length)
                    for (const member of prevMembers)
                        await utils_1.UserLeave(member, voice, this.client.enabledMode);
                prevChannelsMembers.set(voice.id, voice.members.array());
                for (const [, member] of voice.members) {
                    const join = await utils_1.UserJoin(member, voice, this.client.logEnabledAt, this.client.enabledMode);
                    if (join && join.channelID != voice.id)
                        return await utils_1.UserLeave(member, voice, this.client.enabledMode);
                    if (join && join.channelID == voice.id)
                        return;
                }
            }
        }, parseInt(process.env.VOICE_CHECK_INTERVAL));
    }
}
exports.default = ReadyListener2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xpc3RlbmVycy9Mb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxnQ0FBaUM7QUFDakMsd0NBQWtEO0FBRWxELE1BQXFCLGNBQWUsU0FBUSxjQUFRO0lBQXBEOztRQUNXLFNBQUksR0FBdUIsT0FBTyxDQUFBO1FBQ2xDLE9BQUUsR0FBVyxRQUFRLENBQUE7SUFtQ2hDLENBQUM7SUFqQ0csS0FBSyxDQUFDLElBQUk7UUFDTixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM5RCxJQUFJLE1BQU0sR0FBbUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNO2FBQzFDLEtBQUssQ0FBQyxHQUFHLENBQUM7YUFDVixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzthQUMxQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxPQUFPLENBQW1CLENBQUE7UUFFdEUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO1lBQ2QsTUFBTSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFtQixDQUFBO1FBRXRHLElBQUksbUJBQW1CLEdBQWtDLElBQUksR0FBRyxFQUFFLENBQUE7UUFFbEUsV0FBVyxDQUNQLEtBQUssSUFBSSxFQUFFO1lBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVTtnQkFBRSxPQUFNO1lBQ25DLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO2dCQUN4QixNQUFNLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUNyRCxJQUFJLFdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTTtvQkFDNUMsS0FBSyxNQUFNLE1BQU0sSUFBSSxXQUFXO3dCQUM1QixNQUFNLGlCQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO2dCQUUvRCxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUE7Z0JBRXhELEtBQUssTUFBTSxDQUFDLEVBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtvQkFDbkMsTUFBTSxJQUFJLEdBQUcsTUFBTSxnQkFBUSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtvQkFDN0YsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUMsRUFBRTt3QkFBRSxPQUFPLE1BQU0saUJBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7b0JBQ3RHLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLEVBQUU7d0JBQUUsT0FBTTtpQkFDakQ7YUFDSjtRQUNMLENBQUMsRUFDRCxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUM3QyxDQUFBO0lBQ0wsQ0FBQztDQUNKO0FBckNELGlDQXFDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudEV2ZW50cywgR3VpbGRNZW1iZXIsIFNub3dmbGFrZSwgVm9pY2VDaGFubmVsIH0gZnJvbSBcImRpc2NvcmQuanNcIlxuaW1wb3J0IHsgTGlzdGVuZXIgfSBmcm9tIFwiLi4vbGliXCJcbmltcG9ydCB7IFVzZXJKb2luLCBVc2VyTGVhdmUgfSBmcm9tIFwiLi4vbGliL3V0aWxzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhZHlMaXN0ZW5lcjIgZXh0ZW5kcyBMaXN0ZW5lciB7XG4gICAgcHVibGljIHR5cGU6IGtleW9mIENsaWVudEV2ZW50cyA9IFwicmVhZHlcIlxuICAgIHB1YmxpYyBpZDogc3RyaW5nID0gXCJMb2dnZXJcIlxuXG4gICAgYXN5bmMgZXhlYygpIHtcbiAgICAgICAgY29uc3QgZ3VpbGQgPSB0aGlzLmNsaWVudC5ndWlsZHMucmVzb2x2ZShwcm9jZXNzLmVudi5HVUlMRF9JRClcbiAgICAgICAgdmFyIHZvaWNlczogVm9pY2VDaGFubmVsW10gPSBwcm9jZXNzLmVudi5WT0lDRVNcbiAgICAgICAgICAgIC5zcGxpdChcIixcIilcbiAgICAgICAgICAgIC5tYXAoZSA9PiBndWlsZC5jaGFubmVscy5yZXNvbHZlKGUudHJpbSgpKSlcbiAgICAgICAgICAgIC5maWx0ZXIodm9pY2UgPT4gdm9pY2UgJiYgdm9pY2UudHlwZSA9PSBcInZvaWNlXCIpIGFzIFZvaWNlQ2hhbm5lbFtdXG4gICAgICAgIFxuICAgICAgICBpZiAoIXZvaWNlcy5sZW5ndGgpXG4gICAgICAgICAgICB2b2ljZXMgPSBndWlsZC5jaGFubmVscy5jYWNoZS5hcnJheSgpLmZpbHRlcihjaGFubmVsID0+IGNoYW5uZWwudHlwZSA9PSBcInZvaWNlXCIpIGFzIFZvaWNlQ2hhbm5lbFtdXG4gICAgICAgIFxuICAgICAgICB2YXIgcHJldkNoYW5uZWxzTWVtYmVyczogTWFwPFNub3dmbGFrZSwgR3VpbGRNZW1iZXJbXT4gPSBuZXcgTWFwKClcblxuICAgICAgICBzZXRJbnRlcnZhbChcbiAgICAgICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2xpZW50LmxvZ0VuYWJsZWQpIHJldHVyblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgdm9pY2Ugb2Ygdm9pY2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZNZW1iZXJzID0gcHJldkNoYW5uZWxzTWVtYmVycy5nZXQodm9pY2UuaWQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2TWVtYmVycyAmJiAhdm9pY2UubWVtYmVycy5hcnJheSgpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbWVtYmVyIG9mIHByZXZNZW1iZXJzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IFVzZXJMZWF2ZShtZW1iZXIsIHZvaWNlLCB0aGlzLmNsaWVudC5lbmFibGVkTW9kZSlcblxuICAgICAgICAgICAgICAgICAgICBwcmV2Q2hhbm5lbHNNZW1iZXJzLnNldCh2b2ljZS5pZCwgdm9pY2UubWVtYmVycy5hcnJheSgpKVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgWyxtZW1iZXJdIG9mIHZvaWNlLm1lbWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGpvaW4gPSBhd2FpdCBVc2VySm9pbihtZW1iZXIsIHZvaWNlLCB0aGlzLmNsaWVudC5sb2dFbmFibGVkQXQsIHRoaXMuY2xpZW50LmVuYWJsZWRNb2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGpvaW4gJiYgam9pbi5jaGFubmVsSUQgIT0gdm9pY2UuaWQpIHJldHVybiBhd2FpdCBVc2VyTGVhdmUobWVtYmVyLCB2b2ljZSwgdGhpcy5jbGllbnQuZW5hYmxlZE1vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoam9pbiAmJiBqb2luLmNoYW5uZWxJRCA9PSB2b2ljZS5pZCkgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFyc2VJbnQocHJvY2Vzcy5lbnYuVk9JQ0VfQ0hFQ0tfSU5URVJWQUwpXG4gICAgICAgIClcbiAgICB9XG59Il19