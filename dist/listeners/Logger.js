"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lib_1 = require("../lib");
const voice_log_1 = __importDefault(require("../models/voice-log"));
const voices = process.env.VOICES
    .split(",")
    .map(elem => elem.trim())
    .filter(elem => !!elem);
class VoiceStateListener extends lib_1.Listener {
    constructor() {
        super(...arguments);
        this.type = "voiceStateUpdate";
        this.id = "voiceStateUpdate";
    }
    async exec(oldState, newState) {
        if (!this.client.logEnabled)
            return;
        if (voices.length && !voices.includes(newState.channelID || oldState.channelID))
            return;
        if (newState.channel &&
            !oldState.channel) {
            const channel = await lib_1.Utils.AddChannel(newState.channel, this.client.logEnabledAt);
            channel.users.push({
                joinedAt: new Date(),
                leavedAt: "",
                id: newState.member.id
            });
            await voice_log_1.default.updateOne({
                channelID: newState.channelID,
                logDisabledAt: null
            }, {
                $set: {
                    users: channel.users
                }
            });
        }
        if (!newState.channel &&
            oldState.channel) {
            const channel = await lib_1.Utils.AddChannel(oldState.channel, this.client.logEnabledAt);
            const users = lib_1.Utils.UserLeaved(oldState.member, channel);
            await voice_log_1.default.updateOne({ channelID: oldState.channelID, logDisabledAt: null }, { $set: { users: users } });
        }
        if (newState.channel &&
            oldState.channel &&
            newState.channel.id != oldState.channel.id) {
            if (!voices.length || voices.includes(newState.channelID)) {
                let channel = await voice_log_1.default.findOne({ channelID: newState.channelID, logDisabledAt: null }).exec();
                channel.users.push({
                    logEnabledAt: this.client.logEnabledAt,
                    logDisabledAt: "",
                    joinedAt: new Date(),
                    leavedAt: "",
                    id: newState.member.id
                });
                await voice_log_1.default.updateOne({
                    channelID: newState.channelID
                }, {
                    $set: {
                        users: channel.users
                    }
                });
            }
            if (!voices.length || voices.includes(oldState.channelID)) {
                const channel = await lib_1.Utils.AddChannel(oldState.channel, this.client.logEnabledAt);
                const users = lib_1.Utils.UserLeaved(oldState.member, channel);
                await voice_log_1.default.updateOne({ channelID: oldState.channelID }, { $set: { users: users } });
            }
        }
    }
}
exports.default = VoiceStateListener;
//# sourceMappingURL=data:application/json;base64,