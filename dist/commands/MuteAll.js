"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const lib_1 = require("../lib");
class StopCommand extends lib_1.Command {
    constructor() {
        super(...arguments);
        this.aliases = ["muteall", "mute_all", "mutevoice", "mute_voice"];
        this.help = {
            name: "mute_all",
            description: "Мьютит всех в пользователей в голосовом канале.\nТребует право мьютить в голосовом канале в котором вы находитесь.",
            usage: "mute_all",
            category: "Разное"
        };
        this.exceptions = process.env.MUTE_EXCEPTIONS.split(',').map(exception => exception.trim()).filter(elem => !!elem);
    }
    async exec(message) {
        const channel = message.member.voice.channel, guild = message.guild;
        if (!channel)
            return await message.channel.send("❌ Не пытайся меня обмануть, я знаю что ты не в войсе :)");
        if (!channel.permissionsFor(message.member).has("MUTE_MEMBERS"))
            return await message.channel.send("❌ Ну не пытайся обмануть меня, я ведь прекрасно вижу что у тебя нет прав мьютить в этом канале :(");
        if (!channel.permissionsFor(guild.me).has("MUTE_MEMBERS"))
            return await message.channel.send("❌ Я бы хотел сказать что у тебя нет прав мьютить, но сейчас нет прав у меня(");
        var mutes = [], exceptions = [];
        for (const [id, member] of channel.members)
            if (id == message.author.id)
                exceptions.push(`${member.user.tag} (${member}) (Вызвал команду)`);
            else if (this.exceptions.includes(id))
                exceptions.push(`${member.user.tag} (${member}) (Список исключений)`);
            else if (member.voice.mute)
                exceptions.push(`${member.user.tag} (${member}) (Уже замьючен)`);
            else {
                member.edit({ mute: true });
                mutes.push(`${member.user.tag} (${member})`);
            }
        await message.channel.send(new discord_js_1.MessageEmbed({
            description: "✅ Успешно!",
            fields: [{
                    name: "Замьюченные пользователи",
                    value: mutes.length ? mutes.join("\n") : "**Никого**"
                }, {
                    name: "Исключения",
                    value: exceptions.join('\n')
                }]
        }));
    }
}
exports.default = StopCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTXV0ZUFsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9NdXRlQWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQTZEO0FBQzdELGdDQUFnQztBQUdoQyxNQUFxQixXQUFZLFNBQVEsYUFBTztJQUFoRDs7UUFDVyxZQUFPLEdBQWEsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQTtRQUN0RSxTQUFJLEdBQVU7WUFDakIsSUFBSSxFQUFFLFVBQVU7WUFDaEIsV0FBVyxFQUFFLG9IQUFvSDtZQUNqSSxLQUFLLEVBQUUsVUFBVTtZQUNqQixRQUFRLEVBQUUsUUFBUTtTQUNyQixDQUFBO1FBQ08sZUFBVSxHQUFnQixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBMkN0SSxDQUFDO0lBekNHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBZ0I7UUFDdkIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUN0QyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQTtRQUUzQixJQUFJLENBQUMsT0FBTztZQUNSLE9BQU8sTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyx5REFBeUQsQ0FBQyxDQUFBO1FBRWhHLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO1lBQzNELE9BQU8sTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxtR0FBbUcsQ0FBQyxDQUFBO1FBRTFJLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO1lBQ3JELE9BQU8sTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyw4RUFBOEUsQ0FBQyxDQUFBO1FBRXJILElBQUksS0FBSyxHQUFHLEVBQUUsRUFDVixVQUFVLEdBQUcsRUFBRSxDQUFBO1FBRW5CLEtBQUssTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTztZQUN0QyxJQUFJLEVBQUUsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3ZCLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxNQUFNLG9CQUFvQixDQUFDLENBQUE7aUJBQ2pFLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNqQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssTUFBTSx1QkFBdUIsQ0FBQyxDQUFBO2lCQUNwRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSTtnQkFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLE1BQU0sa0JBQWtCLENBQUMsQ0FBQTtpQkFDL0Q7Z0JBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFBO2dCQUN6QixLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEtBQUssTUFBTSxHQUFHLENBQUMsQ0FBQTthQUMvQztRQUVMLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ3RCLElBQUkseUJBQVksQ0FBQztZQUNiLFdBQVcsRUFBRSxZQUFZO1lBQ3pCLE1BQU0sRUFBRSxDQUFDO29CQUNMLElBQUksRUFBRSwwQkFBMEI7b0JBQ2hDLEtBQUssRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZO2lCQUN4RCxFQUFFO29CQUNDLElBQUksRUFBRSxZQUFZO29CQUNsQixLQUFLLEVBQUUsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7aUJBQy9CLENBQUM7U0FDTCxDQUFDLENBQ0wsQ0FBQTtJQUNMLENBQUM7Q0FDSjtBQW5ERCw4QkFtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXNzYWdlLCBNZXNzYWdlRW1iZWQsIFNub3dmbGFrZSB9IGZyb20gXCJkaXNjb3JkLmpzXCJcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiLi4vbGliXCJcbmltcG9ydCB7IElIZWxwIH0gZnJvbSBcIi4uL2xpYi9jb21tYW5kXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvcENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcbiAgICBwdWJsaWMgYWxpYXNlczogc3RyaW5nW10gPSBbXCJtdXRlYWxsXCIsIFwibXV0ZV9hbGxcIiwgXCJtdXRldm9pY2VcIiwgXCJtdXRlX3ZvaWNlXCJdXG4gICAgcHVibGljIGhlbHA6IElIZWxwID0ge1xuICAgICAgICBuYW1lOiBcIm11dGVfYWxsXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcItCc0YzRjtGC0LjRgiDQstGB0LXRhSDQsiDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSDQsiDQs9C+0LvQvtGB0L7QstC+0Lwg0LrQsNC90LDQu9C1LlxcbtCi0YDQtdCx0YPQtdGCINC/0YDQsNCy0L4g0LzRjNGO0YLQuNGC0Ywg0LIg0LPQvtC70L7RgdC+0LLQvtC8INC60LDQvdCw0LvQtSDQsiDQutC+0YLQvtGA0L7QvCDQstGLINC90LDRhdC+0LTQuNGC0LXRgdGMLlwiLFxuICAgICAgICB1c2FnZTogXCJtdXRlX2FsbFwiLFxuICAgICAgICBjYXRlZ29yeTogXCLQoNCw0LfQvdC+0LVcIlxuICAgIH1cbiAgICBwcml2YXRlIGV4Y2VwdGlvbnM6IFNub3dmbGFrZVtdID0gcHJvY2Vzcy5lbnYuTVVURV9FWENFUFRJT05TLnNwbGl0KCcsJykubWFwKGV4Y2VwdGlvbiA9PiBleGNlcHRpb24udHJpbSgpKS5maWx0ZXIoZWxlbSA9PiAhIWVsZW0pXG4gICAgXG4gICAgYXN5bmMgZXhlYyhtZXNzYWdlOiBNZXNzYWdlKSB7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSBtZXNzYWdlLm1lbWJlci52b2ljZS5jaGFubmVsLFxuICAgICAgICAgICAgICBndWlsZCA9IG1lc3NhZ2UuZ3VpbGRcbiAgICAgICAgXG4gICAgICAgIGlmICghY2hhbm5lbClcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBtZXNzYWdlLmNoYW5uZWwuc2VuZChcIuKdjCDQndC1INC/0YvRgtCw0LnRgdGPINC80LXQvdGPINC+0LHQvNCw0L3Rg9GC0YwsINGPINC30L3QsNGOINGH0YLQviDRgtGLINC90LUg0LIg0LLQvtC50YHQtSA6KVwiKVxuICAgICAgICBcbiAgICAgICAgaWYgKCFjaGFubmVsLnBlcm1pc3Npb25zRm9yKG1lc3NhZ2UubWVtYmVyKS5oYXMoXCJNVVRFX01FTUJFUlNcIikpXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgbWVzc2FnZS5jaGFubmVsLnNlbmQoXCLinYwg0J3RgyDQvdC1INC/0YvRgtCw0LnRgdGPINC+0LHQvNCw0L3Rg9GC0Ywg0LzQtdC90Y8sINGPINCy0LXQtNGMINC/0YDQtdC60YDQsNGB0L3QviDQstC40LbRgyDRh9GC0L4g0YMg0YLQtdCx0Y8g0L3QtdGCINC/0YDQsNCyINC80YzRjtGC0LjRgtGMINCyINGN0YLQvtC8INC60LDQvdCw0LvQtSA6KFwiKVxuXG4gICAgICAgIGlmICghY2hhbm5lbC5wZXJtaXNzaW9uc0ZvcihndWlsZC5tZSkuaGFzKFwiTVVURV9NRU1CRVJTXCIpKVxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IG1lc3NhZ2UuY2hhbm5lbC5zZW5kKFwi4p2MINCvINCx0Ysg0YXQvtGC0LXQuyDRgdC60LDQt9Cw0YLRjCDRh9GC0L4g0YMg0YLQtdCx0Y8g0L3QtdGCINC/0YDQsNCyINC80YzRjtGC0LjRgtGMLCDQvdC+INGB0LXQudGH0LDRgSDQvdC10YIg0L/RgNCw0LIg0YMg0LzQtdC90Y8oXCIpXG5cbiAgICAgICAgdmFyIG11dGVzID0gW10sXG4gICAgICAgICAgICBleGNlcHRpb25zID0gW11cblxuICAgICAgICBmb3IgKGNvbnN0IFtpZCwgbWVtYmVyXSBvZiBjaGFubmVsLm1lbWJlcnMpXG4gICAgICAgICAgICBpZiAoaWQgPT0gbWVzc2FnZS5hdXRob3IuaWQpIFxuICAgICAgICAgICAgICAgIGV4Y2VwdGlvbnMucHVzaChgJHttZW1iZXIudXNlci50YWd9ICgke21lbWJlcn0pICjQktGL0LfQstCw0Lsg0LrQvtC80LDQvdC00YMpYClcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuZXhjZXB0aW9ucy5pbmNsdWRlcyhpZCkpIFxuICAgICAgICAgICAgICAgIGV4Y2VwdGlvbnMucHVzaChgJHttZW1iZXIudXNlci50YWd9ICgke21lbWJlcn0pICjQodC/0LjRgdC+0Log0LjRgdC60LvRjtGH0LXQvdC40LkpYClcbiAgICAgICAgICAgIGVsc2UgaWYgKG1lbWJlci52b2ljZS5tdXRlKVxuICAgICAgICAgICAgICAgIGV4Y2VwdGlvbnMucHVzaChgJHttZW1iZXIudXNlci50YWd9ICgke21lbWJlcn0pICjQo9C20LUg0LfQsNC80YzRjtGH0LXQvSlgKVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVtYmVyLmVkaXQoe211dGU6IHRydWV9KVxuICAgICAgICAgICAgICAgIG11dGVzLnB1c2goYCR7bWVtYmVyLnVzZXIudGFnfSAoJHttZW1iZXJ9KWApXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgbWVzc2FnZS5jaGFubmVsLnNlbmQoXG4gICAgICAgICAgICBuZXcgTWVzc2FnZUVtYmVkKHtcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCLinIUg0KPRgdC/0LXRiNC90L4hXCIsXG4gICAgICAgICAgICAgICAgZmllbGRzOiBbe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcItCX0LDQvNGM0Y7Rh9C10L3QvdGL0LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C4XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtdXRlcy5sZW5ndGggPyBtdXRlcy5qb2luKFwiXFxuXCIpIDogXCIqKtCd0LjQutC+0LPQvioqXCJcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwi0JjRgdC60LvRjtGH0LXQvdC40Y9cIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGV4Y2VwdGlvbnMuam9pbignXFxuJylcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgIH1cbn0iXX0=