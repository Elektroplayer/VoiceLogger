"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const lib_1 = require("../lib");
const path_1 = require("path");
const modes = process.env.LOGGER_MODES
    .split(',')
    .map(e => e.trim())
    .filter(e => !!e);
class StartCommand extends lib_1.Command {
    constructor() {
        super(...arguments);
        this.aliases = ["start", "старт", "включить", "запустить"];
        this.help = {
            name: "start",
            description: "Запускает логирование всех входов и выходов в голосовых каналах что указаны в конфиге бота.",
            usage: "start",
            category: "Логирование"
        };
        this.loggerAccessOnly = true;
    }
    async exec({ channel }, [...modeArr]) {
        const mode = modeArr.join(' ');
        if (this.client.logEnabled)
            return await channel.send("❌ Логирование уже запущено!");
        if (!mode || !modes.includes(mode.trim()))
            return await channel.send(`Режима \`${mode || "Не указан"}\` не существует в текущем конфиге.\n` +
                `Доступные режимы: \`${modes.join('`, `')}\``);
        try {
            fs_1.writeFileSync(path_1.join(__dirname, '..', '..', 'LogEnabled.json'), `"${mode}"`);
            this.client.logEnabled = true;
            this.client.logEnabledAt = new Date();
            this.client.enabledMode = mode;
            await channel.send("✅ Логирование запущено!");
        }
        catch (e) {
            await channel.send("❌ При запуске логирования что-то пошло не так...");
            await channel.send(`Стек вызывов (обрезано до 1900 символов из-за ограничений Discord): ${e.stack.slice(0, 1900)}`);
        }
    }
}
exports.default = StartCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZHMvU3RhcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSwyQkFBa0M7QUFDbEMsZ0NBQWdDO0FBQ2hDLCtCQUEyQjtBQUUzQixNQUFNLEtBQUssR0FBYSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVk7S0FDM0MsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNWLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNsQixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFFckIsTUFBcUIsWUFBYSxTQUFRLGFBQU87SUFBakQ7O1FBQ1csWUFBTyxHQUFhLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFDL0QsU0FBSSxHQUFVO1lBQ2pCLElBQUksRUFBRSxPQUFPO1lBQ2IsV0FBVyxFQUFFLDZGQUE2RjtZQUMxRyxLQUFLLEVBQUUsT0FBTztZQUNkLFFBQVEsRUFBRSxhQUFhO1NBQzFCLENBQUE7UUFDTSxxQkFBZ0IsR0FBWSxJQUFJLENBQUE7SUF1QjNDLENBQUM7SUFyQkcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBVyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQVc7UUFDbkQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUM5QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVTtZQUN0QixPQUFPLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO1FBRTVELElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQyxPQUFPLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxXQUFXLHVDQUF1QztnQkFDdEUsdUJBQXVCLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRTVFLElBQUk7WUFDQSxrQkFBYSxDQUFDLFdBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxpQkFBaUIsQ0FBQyxFQUFFLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQTtZQUMxRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUE7WUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQTtZQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUE7WUFFOUIsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUE7U0FDaEQ7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxrREFBa0QsQ0FBQyxDQUFBO1lBQ3RFLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtTQUN0SDtJQUNMLENBQUM7Q0FDSjtBQS9CRCwrQkErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJSGVscCB9IGZyb20gXCIuLi9saWIvY29tbWFuZFwiXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcImRpc2NvcmQuanNcIlxuaW1wb3J0IHsgd3JpdGVGaWxlU3luYyB9IGZyb20gXCJmc1wiXG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcIi4uL2xpYlwiXG5pbXBvcnQgeyBqb2luIH0gZnJvbSBcInBhdGhcIlxuXG5jb25zdCBtb2Rlczogc3RyaW5nW10gPSBwcm9jZXNzLmVudi5MT0dHRVJfTU9ERVNcbiAgICAuc3BsaXQoJywnKVxuICAgIC5tYXAoZSA9PiBlLnRyaW0oKSlcbiAgICAuZmlsdGVyKGUgPT4gISFlKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGFydENvbW1hbmQgZXh0ZW5kcyBDb21tYW5kIHtcbiAgICBwdWJsaWMgYWxpYXNlczogc3RyaW5nW10gPSBbXCJzdGFydFwiLCBcItGB0YLQsNGA0YJcIiwgXCLQstC60LvRjtGH0LjRgtGMXCIsIFwi0LfQsNC/0YPRgdGC0LjRgtGMXCJdXG4gICAgcHVibGljIGhlbHA6IElIZWxwID0ge1xuICAgICAgICBuYW1lOiBcInN0YXJ0XCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcItCX0LDQv9GD0YHQutCw0LXRgiDQu9C+0LPQuNGA0L7QstCw0L3QuNC1INCy0YHQtdGFINCy0YXQvtC00L7QsiDQuCDQstGL0YXQvtC00L7QsiDQsiDQs9C+0LvQvtGB0L7QstGL0YUg0LrQsNC90LDQu9Cw0YUg0YfRgtC+INGD0LrQsNC30LDQvdGLINCyINC60L7QvdGE0LjQs9C1INCx0L7RgtCwLlwiLFxuICAgICAgICB1c2FnZTogXCJzdGFydFwiLFxuICAgICAgICBjYXRlZ29yeTogXCLQm9C+0LPQuNGA0L7QstCw0L3QuNC1XCJcbiAgICB9XG4gICAgcHVibGljIGxvZ2dlckFjY2Vzc09ubHk6IGJvb2xlYW4gPSB0cnVlXG5cbiAgICBhc3luYyBleGVjKHsgY2hhbm5lbCB9OiBNZXNzYWdlLCBbLi4ubW9kZUFycl06IHN0cmluZ1tdKSB7XG4gICAgICAgIGNvbnN0IG1vZGUgPSBtb2RlQXJyLmpvaW4oJyAnKVxuICAgICAgICBpZiAodGhpcy5jbGllbnQubG9nRW5hYmxlZClcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjaGFubmVsLnNlbmQoXCLinYwg0JvQvtCz0LjRgNC+0LLQsNC90LjQtSDRg9C20LUg0LfQsNC/0YPRidC10L3QviFcIilcblxuICAgICAgICBpZiAoIW1vZGUgfHwgIW1vZGVzLmluY2x1ZGVzKG1vZGUudHJpbSgpKSlcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBjaGFubmVsLnNlbmQoYNCg0LXQttC40LzQsCBcXGAke21vZGUgfHwgXCLQndC1INGD0LrQsNC30LDQvVwifVxcYCDQvdC1INGB0YPRidC10YHRgtCy0YPQtdGCINCyINGC0LXQutGD0YnQtdC8INC60L7QvdGE0LjQs9C1LlxcbmAgKyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYNCU0L7RgdGC0YPQv9C90YvQtSDRgNC10LbQuNC80Ys6IFxcYCR7bW9kZXMuam9pbignYCwgYCcpfVxcYGApXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdyaXRlRmlsZVN5bmMoam9pbihfX2Rpcm5hbWUsICcuLicsICcuLicsICdMb2dFbmFibGVkLmpzb24nKSwgYFwiJHttb2RlfVwiYClcbiAgICAgICAgICAgIHRoaXMuY2xpZW50LmxvZ0VuYWJsZWQgPSB0cnVlXG4gICAgICAgICAgICB0aGlzLmNsaWVudC5sb2dFbmFibGVkQXQgPSBuZXcgRGF0ZSgpXG4gICAgICAgICAgICB0aGlzLmNsaWVudC5lbmFibGVkTW9kZSA9IG1vZGVcblxuICAgICAgICAgICAgYXdhaXQgY2hhbm5lbC5zZW5kKFwi4pyFINCb0L7Qs9C40YDQvtCy0LDQvdC40LUg0LfQsNC/0YPRidC10L3QviFcIilcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgYXdhaXQgY2hhbm5lbC5zZW5kKFwi4p2MINCf0YDQuCDQt9Cw0L/Rg9GB0LrQtSDQu9C+0LPQuNGA0L7QstCw0L3QuNGPINGH0YLQvi3RgtC+INC/0L7RiNC70L4g0L3QtSDRgtCw0LouLi5cIilcbiAgICAgICAgICAgIGF3YWl0IGNoYW5uZWwuc2VuZChg0KHRgtC10Log0LLRi9C30YvQstC+0LIgKNC+0LHRgNC10LfQsNC90L4g0LTQviAxOTAwINGB0LjQvNCy0L7Qu9C+0LIg0LjQty3Qt9CwINC+0LPRgNCw0L3QuNGH0LXQvdC40LkgRGlzY29yZCk6ICR7ZS5zdGFjay5zbGljZSgwLCAxOTAwKX1gKVxuICAgICAgICB9XG4gICAgfVxufSJdfQ==