"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindUser = exports.UserLeaved = exports.DisableLog = exports.AddChannel = exports.loadCommands = exports.loadListeners = void 0;
const listener_1 = __importDefault(require("./listener"));
const path_1 = require("path");
const fs_1 = __importDefault(require("fs"));
const command_1 = __importDefault(require("./command"));
const voice_log_1 = __importDefault(require("../models/voice-log"));
function loadListeners(client, listenersDir) {
    for (const file of fs_1.default.readdirSync(listenersDir, { withFileTypes: true })) {
        if (file.isFile()) {
            try {
                const listenerClass = require(path_1.join(listenersDir, file.name)).default;
                if (!listener_1.default.isPrototypeOf(listenerClass))
                    return;
                const listener = new listenerClass(client);
                client.addListener(listener.type, listener.exec.bind(listener));
                console.log(`+ ${file.name}`);
            }
            catch (e) {
                console.log(`Cannot load ${file.name}\nError: ${e.stack}`);
            }
        }
    }
}
exports.loadListeners = loadListeners;
function loadCommands(client, commandsDir) {
    for (const file of fs_1.default.readdirSync(commandsDir, { withFileTypes: true })) {
        if (file.isFile()) {
            try {
                const commandClass = require(path_1.join(commandsDir, file.name)).default;
                if (!command_1.default.isPrototypeOf(commandClass))
                    return;
                const command = new commandClass(client);
                for (const alias of command.aliases)
                    client.commands.set(alias.toLowerCase(), command);
                console.log(`+ ${file.name}`);
            }
            catch (e) {
                console.log(`Cannot load ${file.name}\nError: ${e.stack}`);
            }
        }
    }
}
exports.loadCommands = loadCommands;
async function AddChannel(voiceChannel, enabledAt) {
    const channel = await voice_log_1.default.findOne({ channelID: voiceChannel.id, logEnabledAt: enabledAt, logDisabledAt: null }).exec();
    if (channel)
        return channel;
    return (await voice_log_1.default.insertMany({
        channelID: voiceChannel.id,
        logEnabledAt: enabledAt,
        logDisabledAt: null,
        users: []
    }))[0];
}
exports.AddChannel = AddChannel;
async function DisableLog() {
    await voice_log_1.default.updateMany({ logDisabledAt: null }, { $set: { logDisabledAt: new Date() } }).exec();
}
exports.DisableLog = DisableLog;
function UserLeaved(user, channel) {
    const id = typeof user == "string" ? user : user.id;
    user = FindUser(id, channel.users);
    if (!user)
        return [];
    const index = channel.users.indexOf(user);
    channel.users[index].leavedAt = new Date();
    return channel.users;
}
exports.UserLeaved = UserLeaved;
function FindUser(user, array) {
    const id = typeof user == "string" ? user : user.id;
    for (const user of array)
        if (user.id == id && !user.leavedAt && !user.logDisabledAt)
            return user;
}
exports.FindUser = FindUser;
//# sourceMappingURL=data:application/json;base64,