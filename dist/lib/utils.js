"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSortedUserJoins = exports.GetDate = exports.GetTotalTime = exports.GetUsersForDateAndMode = exports.GetDateWithoutTime = exports.isDate = exports.DisableLog = exports.UserLeave = exports.UserJoin = exports.AddOrGetUser = exports.loadCommands = exports.loadListeners = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const command_1 = __importDefault(require("./command"));
const listener_1 = __importDefault(require("./listener"));
const user_1 = __importDefault(require("../models/user"));
const discord_js_1 = require("discord.js");
const strftime_1 = __importDefault(require("strftime"));
function loadListeners(client, listenersDir) {
    for (const file of fs_1.default.readdirSync(listenersDir, { withFileTypes: true })) {
        if (file.isFile()) {
            try {
                const listenerClass = require(path_1.join(listenersDir, file.name)).default;
                if (!listener_1.default.isPrototypeOf(listenerClass))
                    return;
                const listener = new listenerClass(client);
                client.addListener(listener.type, listener.exec.bind(listener));
                console.log(`+ ${file.name}`);
            }
            catch (e) {
                console.log(`Cannot load ${file.name}\nError: ${e.stack}`);
            }
        }
    }
}
exports.loadListeners = loadListeners;
function loadCommands(client, commandsDir) {
    for (const file of fs_1.default.readdirSync(commandsDir, { withFileTypes: true })) {
        if (file.isFile()) {
            try {
                const commandClass = require(path_1.join(commandsDir, file.name)).default;
                if (!command_1.default.isPrototypeOf(commandClass))
                    return;
                const command = new commandClass(client);
                client.commands.push(command);
                console.log(`+ ${file.name}`);
            }
            catch (e) {
                console.log(`Cannot load ${file.name}\nError: ${e.stack}`);
            }
        }
    }
}
exports.loadCommands = loadCommands;
async function AddOrGetUser(user, mode) {
    const id = (user instanceof discord_js_1.User || user instanceof discord_js_1.GuildMember) ? user.id : user;
    var userDoc = await user_1.default.findOne({ userID: id, logMode: mode }).exec();
    if (userDoc)
        return userDoc;
    userDoc = new user_1.default();
    userDoc.userID = id;
    userDoc.note = "Заметка отсутствует";
    userDoc.logMode = mode;
    userDoc.joins = [];
    return await userDoc.save();
}
exports.AddOrGetUser = AddOrGetUser;
async function UserJoin(user, channel, logEnabledAt, mode) {
    const userID = user instanceof discord_js_1.User || user instanceof discord_js_1.GuildMember ? user.id : user;
    const channelID = channel instanceof discord_js_1.VoiceChannel ? channel.id : channel;
    const userDoc = await AddOrGetUser(userID, mode);
    const join = userDoc.joins.find(join => !join.logDisabledAt && !join.leavedAt);
    if (join)
        return join;
    userDoc.joins.push({
        channelID: channelID,
        logEnabledAt: logEnabledAt,
        logDisabledAt: null,
        joinedAt: new Date(),
        leavedAt: null
    });
    await user_1.default.updateOne({ userID: userID }, { $set: { joins: userDoc.joins } }).exec();
}
exports.UserJoin = UserJoin;
async function UserLeave(user, channel, mode) {
    const userID = user instanceof discord_js_1.User || user instanceof discord_js_1.GuildMember ? user.id : user, userDoc = await AddOrGetUser(userID, mode), channelID = channel instanceof discord_js_1.VoiceChannel ? channel.id : channel, index = userDoc.joins.findIndex(join => !join.logDisabledAt && !join.leavedAt && join.channelID == channelID), join = userDoc.joins[index];
    if (!userDoc.joins.length || !join)
        return;
    userDoc.joins[index] = {
        logEnabledAt: join.logEnabledAt,
        logDisabledAt: null,
        joinedAt: join.joinedAt,
        leavedAt: new Date(),
        channelID: join.channelID
    };
    await user_1.default.updateOne({ userID }, { $set: { joins: userDoc.joins } }).exec();
}
exports.UserLeave = UserLeave;
async function DisableLog() {
    const users = await user_1.default.find().exec();
    for (const user of users) {
        for (const { channelID, logDisabledAt } of user.joins) {
            if (logDisabledAt)
                continue;
            const index = user.joins.findIndex(join => join.channelID == channelID && !join.logDisabledAt);
            const join = user.joins[index];
            join.logDisabledAt = new Date();
            join.leavedAt = join.leavedAt || new Date();
            user.joins[index] = join;
        }
        await user_1.default.updateOne({ userID: user.userID }, { $set: { joins: user.joins } });
    }
}
exports.DisableLog = DisableLog;
function isDate(date) {
    return !isNaN(GetDate(date).valueOf());
}
exports.isDate = isDate;
function GetDateWithoutTime(date) {
    return strftime_1.default("%D", date);
}
exports.GetDateWithoutTime = GetDateWithoutTime;
async function GetUsersForDateAndMode(date, mode) {
    const usersDocs = await user_1.default.find().exec(), finalUsers = [];
    for (const userDoc of usersDocs) {
        if (!mode || userDoc.logMode != mode)
            continue;
        const finalJoins = [];
        for (const join of userDoc.joins)
            if (GetDateWithoutTime(join.logEnabledAt) == GetDateWithoutTime(date))
                finalJoins.push(join);
        if (!finalJoins.length)
            continue;
        userDoc.joins = finalJoins;
        finalUsers.push(userDoc);
    }
    return finalUsers;
}
exports.GetUsersForDateAndMode = GetUsersForDateAndMode;
function GetTotalTime(joins) {
    var time = 0;
    for (const join of joins) {
        if (!join.leavedAt)
            continue;
        time += join.leavedAt.valueOf() - join.joinedAt.valueOf();
    }
    return (time - time % 1000) / 1000;
}
exports.GetTotalTime = GetTotalTime;
function GetDate(date) {
    const dateArr = date.split(/\./g).reverse();
    if (dateArr.length == 3 && !dateArr[0].startsWith("20"))
        dateArr[0] = "20" + dateArr[0];
    return dateArr.length == 2 ? new Date(dateArr.join('.') + "." + new Date().getFullYear()) : new Date(dateArr.join('.'));
}
exports.GetDate = GetDate;
function GetSortedUserJoins(userDoc) {
    const map = new Map();
    for (const join of userDoc.joins) {
        const prevJoins = map.get(strftime_1.default("%D", join.joinedAt)), writeJoin = { joinedAt: join.joinedAt, leavedAt: join.leavedAt, channelID: join.channelID };
        map.set(strftime_1.default("%D", join.joinedAt), prevJoins ? [writeJoin, ...prevJoins] : [writeJoin]);
    }
    return map;
}
exports.GetSortedUserJoins = GetSortedUserJoins;
//# sourceMappingURL=data:application/json;base64,